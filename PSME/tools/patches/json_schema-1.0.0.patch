diff -Naur --ignore-trailing-space json_schema-1.0.0/app/json-schema-test.cpp json_schema-master/app/json-schema-test.cpp
--- json_schema-1.0.0/app/json-schema-test.cpp	2016-12-29 08:50:06.000000000 +0100
+++ json_schema-master/app/json-schema-test.cpp	2018-02-09 10:25:08.000000000 +0100
@@ -27,6 +27,7 @@
 
 #include <fstream>
 #include <regex>
+#include <iostream>
 
 using nlohmann::json;
 using nlohmann::json_uri;
@@ -60,26 +61,22 @@
 
 static void loader(const json_uri &uri, json &schema)
 {
-	std::map<std::string, std::string> external_schemas =
-	    {
-	        {"http://localhost:1234/integer.json", JSON_SCHEMA_TEST_SUITE_PATH "/remotes/integer.json"},
-	        {"http://localhost:1234/subSchemas.json", JSON_SCHEMA_TEST_SUITE_PATH "/remotes/subSchemas.json"},
-	        {"http://localhost:1234/folder/folderInteger.json", JSON_SCHEMA_TEST_SUITE_PATH "/remotes/folder/folderInteger.json"},
-	    };
-
 	if (uri.to_string() == "http://json-schema.org/draft-04/schema#") {
 		schema = nlohmann::json_schema_draft4::draft4_schema_builtin;
 		return;
 	}
 
-	std::string fn = external_schemas[uri.url()];
+	std::string fn = JSON_SCHEMA_TEST_SUITE_PATH;
+	fn += "/remotes";
+	fn += uri.path();
+	std::cerr << fn << "\n";
 
 	std::fstream s(fn.c_str());
 	if (!s.good())
 		throw std::invalid_argument("could not open " + uri.url() + " for schema loading\n");
 
 	try {
-		schema << s;
+		s >> schema;
 	} catch (std::exception &e) {
 		throw e;
 	}
diff -Naur --ignore-trailing-space json_schema-1.0.0/app/json-schema-validate.cpp json_schema-master/app/json-schema-validate.cpp
--- json_schema-1.0.0/app/json-schema-validate.cpp	2016-12-29 08:50:06.000000000 +0100
+++ json_schema-master/app/json-schema-validate.cpp	2018-02-09 10:25:08.000000000 +0100
@@ -26,6 +26,7 @@
 #include <json-schema.hpp>
 
 #include <fstream>
+#include <iostream>
 
 using nlohmann::json;
 using nlohmann::json_uri;
@@ -37,7 +38,6 @@
 	exit(EXIT_FAILURE);
 }
 
-
 #if 0
 	resolver r(nlohmann::json_schema_draft4::root_schema,
 			   nlohmann::json_schema_draft4::root_schema["id"]);
@@ -47,9 +47,9 @@
 
 static void loader(const json_uri &uri, json &schema)
 {
-	std::fstream lf(uri.path());
+	std::fstream lf("." + uri.path());
 	if (!lf.good())
-		throw std::invalid_argument("could not open " + uri.url());
+		throw std::invalid_argument("could not open " + uri.url() + " tried with " + uri.path());
 
 	try {
 		lf >> schema;
@@ -63,7 +63,6 @@
 	if (argc != 2)
 		usage(argv[0]);
 
-
 	std::fstream f(argv[1]);
 	if (!f.good()) {
 		std::cerr << "could not open " << argv[1] << " for reading\n";
@@ -75,12 +74,12 @@
 	try {
 		f >> schema;
 	} catch (std::exception &e) {
-		std::cerr << e.what() << " at " << f.tellp() << "\n";
+		std::cerr << e.what() << " at " << f.tellp() << " - while parsing the schema\n";
 		return EXIT_FAILURE;
 	}
 
 	// 2) create the validator and
-	json_validator validator(loader, [](const std::string&, const std::string&){});
+	json_validator validator(loader, [](const std::string &, const std::string &) {});
 
 	try {
 		// insert this schema as the root to the validator
@@ -95,11 +94,11 @@
 	json document;
 
 	try {
-		document << std::cin;
+		std::cin >> document;
 		validator.validate(document);
 	} catch (std::exception &e) {
 		std::cerr << "schema validation failed\n";
-		std::cerr << e.what() << "\n";
+		std::cerr << e.what() << " at offset: " << std::cin.tellg() << "\n";
 		return EXIT_FAILURE;
 	}
 
diff -Naur --ignore-trailing-space json_schema-1.0.0/CMakeLists.txt json_schema-master/CMakeLists.txt
--- json_schema-1.0.0/CMakeLists.txt	2016-12-29 08:50:06.000000000 +0100
+++ json_schema-master/CMakeLists.txt	2018-02-21 11:13:32.301170452 +0100
@@ -2,45 +2,81 @@
 
 cmake_minimum_required(VERSION 3.2)
 
-# if used as a subdirectory just define a json-hpp-target (INTERFACE)
+# if used as a subdirectory just define a json-hpp-target as add_library(json-hpp INTERFACE)
+# and associate the path to json.hpp via target_include_directories()
 if(NOT TARGET json-hpp)
+    set(NLOHMANN_JSON_DIR "" CACHE STRING "path to json.hpp")
+
 # find nlohmann's json.hpp
-    find_path(NLOHMANN_JSON_DIR
-        NAMES
-            json.hpp)
+    find_path(JSON_HPP json.hpp
+        PATHS
+            ${CMAKE_BINARY_DIR}/${NLOHMANN_JSON_DIR} # in case it is a relative path
+            ${NLOHMANN_JSON_DIR})
 
-    if(NOT NLOHMANN_JSON_DIR)
+    if(NOT JSON_HPP)
         message(FATAL_ERROR "please set NLOHMANN_JSON_DIR to a path in which NLohmann's json.hpp can be found.")
     endif()
 
-# create an interface-library for simple cmake-linking
+    # get the full, real path
+    get_filename_component(NLOHMANN_JSON_REALPATH ${JSON_HPP} REALPATH)
+
+    # create an interface-library for simple cmake-linking
     add_library(json-hpp INTERFACE)
     target_include_directories(json-hpp
         INTERFACE
-            ${NLOHMANN_JSON_DIR})
+            ${NLOHMANN_JSON_REALPATH})
 endif()
 
 # and one for the validator
-add_library(json-schema-validator
+add_library(json-schema-validator STATIC
     src/json-schema-draft4.json.cpp
     src/json-uri.cpp
     src/json-validator.cpp)
+
 target_include_directories(json-schema-validator
     PUBLIC
         ${CMAKE_CURRENT_SOURCE_DIR}/src)
-target_compile_options(json-schema-validator
+
+target_compile_features(json-schema-validator
     PUBLIC
-        -Wall -Wextra) # bad, better use something else based on compiler type
+        cxx_range_for) # for C++11 - flags
+# Enable more compiler warnings, except when using Visual Studio compiler
+if(NOT MSVC)
+    target_compile_options(json-schema-validator
+        PUBLIC
+            -Wall -Wextra)
+endif()
 target_link_libraries(json-schema-validator
     PUBLIC
         json-hpp)
+target_compile_definitions(json-schema-validator
+    PRIVATE
+        -DJSON_SCHEMA_VALIDATOR_EXPORTS)
+
+# regex with boost if gcc < 4.9 - default is std::regex
+if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
+    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9.0")
+        find_package(Boost COMPONENTS regex)
+        if(NOT Boost_FOUND)
+            message(STATUS "GCC less then 4.9 and boost-regex NOT found - no regex used")
+            target_compile_definitions(json-schema-validator PRIVATE -DJSON_SCHEMA_NO_REGEX)
+        else()
+            message(STATUS "GCC less then 4.9 and boost-regex FOUND - using boost::regex")
+            target_compile_definitions(json-schema-validator PRIVATE -DJSON_SCHEMA_BOOST_REGEX)
+            target_include_directories(json-schema-validator PRIVATE ${Boost_INCLUDE_DIRS})
+            target_link_libraries(json-schema-validator PRIVATE ${Boost_LIBRARIES})
+        endif()
+    endif()
+endif()
 
-install(
-    FILES
-        ${CMAKE_CURRENT_SOURCE_DIR}/src/json-schema-validator.hpp
-    DESTINATION
-        ${CMAKE_INSTALL_PREFIX}/include
-)
+if(NOT TARGET json-hpp) # if used as a subdirectory do not install json-schema.hpp
+    install(
+        FILES
+           ${CMAKE_CURRENT_SOURCE_DIR}/src/json-schema.hpp
+        DESTINATION
+            ${CMAKE_INSTALL_PREFIX}/include
+    )
+endif()
 
 # simple json-schema-validator-executable
 add_executable(json-schema-validate app/json-schema-validate.cpp)
@@ -92,5 +128,3 @@
     message(STATUS "Consider setting JSON_SCHEMA_TEST_SUITE_PATH to a path in which JSON-Schema-Test-Suite is located (github.com/json-schema-org/JSON-Schema-Test-Suite).")
 endif()
 
-
-
diff -Naur --ignore-trailing-space json_schema-1.0.0/README.md json_schema-master/README.md
--- json_schema-1.0.0/README.md	2016-12-29 08:50:06.000000000 +0100
+++ json_schema-master/README.md	2018-02-09 10:25:08.000000000 +0100
@@ -72,7 +72,7 @@
 See also `app/json-schema-validate.cpp`.
 
 ```C++
-#include "json-schema-validator.hpp"
+#include "json-schema.hpp"
 
 using nlohmann::json;
 using nlohmann::json_uri;
diff -Naur --ignore-trailing-space json_schema-1.0.0/src/json-schema-draft4.json.cpp json_schema-master/src/json-schema-draft4.json.cpp
--- json_schema-1.0.0/src/json-schema-draft4.json.cpp	2016-12-29 08:50:06.000000000 +0100
+++ json_schema-master/src/json-schema-draft4.json.cpp	2018-02-09 10:25:08.000000000 +0100
@@ -1,6 +1,8 @@
 #include <json-schema.hpp>
 
-namespace nlohmann::json_schema_draft4
+namespace nlohmann
+{
+namespace json_schema_draft4
 {
 
 json draft4_schema_builtin = R"( {
@@ -155,3 +157,4 @@
 } )"_json;
 
 }
+}
diff -Naur --ignore-trailing-space json_schema-1.0.0/src/json-schema.hpp json_schema-master/src/json-schema.hpp
--- json_schema-1.0.0/src/json-schema.hpp	2016-12-29 08:50:06.000000000 +0100
+++ json_schema-master/src/json-schema.hpp	2018-02-09 10:25:08.000000000 +0100
@@ -26,6 +26,16 @@
 #ifndef NLOHMANN_JSON_SCHEMA_HPP__
 #define NLOHMANN_JSON_SCHEMA_HPP__
 
+#ifdef _WIN32
+#    ifdef JSON_SCHEMA_VALIDATOR_EXPORTS
+#        define JSON_SCHEMA_VALIDATOR_API __declspec(dllexport)
+#    else
+#        define JSON_SCHEMA_VALIDATOR_API __declspec(dllimport)
+#    endif
+#else
+#    define JSON_SCHEMA_VALIDATOR_API
+#endif
+
 #include <json.hpp>
 
 // make yourself a home - welcome to nlohmann's namespace
@@ -51,14 +61,14 @@
 //   ~ and %  - codec
 //   needs testing and clarification regarding the '#' at the beginning
 
-class json_pointer
+class local_json_pointer
 {
 	std::string str_;
 
 	void from_string(const std::string &r);
 
 public:
-	json_pointer(const std::string &s = "")
+	local_json_pointer(const std::string &s = "")
 	{
 		from_string(s);
 	}
@@ -83,14 +93,14 @@
 //
 // This is done implement the requirements described in section 8.2.
 //
-class json_uri
+class JSON_SCHEMA_VALIDATOR_API json_uri
 {
 	std::string urn_;
 
 	std::string proto_;
 	std::string hostname_;
 	std::string path_;
-	json_pointer pointer_;
+	local_json_pointer pointer_;
 
 protected:
 	// decodes a JSON uri and replaces all or part of the currently stored values
@@ -110,7 +120,7 @@
 	const std::string protocol() const { return proto_; }
 	const std::string hostname() const { return hostname_; }
 	const std::string path() const { return path_; }
-	const json_pointer pointer() const { return pointer_; }
+	const local_json_pointer pointer() const { return pointer_; }
 
 	const std::string url() const;
 
@@ -155,7 +165,7 @@
 
 extern json draft4_schema_builtin;
 
-class json_validator
+class JSON_SCHEMA_VALIDATOR_API json_validator
 {
 	std::vector<std::shared_ptr<json>> schema_store_;
 	std::shared_ptr<json> root_schema_;
@@ -164,10 +174,10 @@
 
 	std::map<json_uri, const json *> schema_refs_;
 
-	void validate(json &instance, const json &schema_, const std::string &name);
-	void validate_array(json &instance, const json &schema_, const std::string &name);
-	void validate_object(json &instance, const json &schema_, const std::string &name);
-    void validate_string(json &instance, const json &schema, const std::string &name);
+	void validate(const json &instance, const json &schema_, const std::string &name);
+	void validate_array(const json &instance, const json &schema_, const std::string &name);
+	void validate_object(const json &instance, const json &schema_, const std::string &name);
+    void validate_string(const json &instance, const json &schema, const std::string &name);
 
 	void insert_schema(const json &input, const json_uri &id);
 
@@ -182,7 +192,7 @@
 	void set_root_schema(const json &);
 
 	// validate a json-document based on the root-schema
-	void validate(json &instance);
+	void validate(const json &instance);
 };
 
 } // json_schema_draft4
diff -Naur --ignore-trailing-space json_schema-1.0.0/src/json-uri.cpp json_schema-master/src/json-uri.cpp
--- json_schema-1.0.0/src/json-uri.cpp	2016-12-29 08:50:06.000000000 +0100
+++ json_schema-master/src/json-uri.cpp	2018-02-09 10:25:08.000000000 +0100
@@ -28,7 +28,7 @@
 namespace nlohmann
 {
 
-void json_pointer::from_string(const std::string &r)
+void local_json_pointer::from_string(const std::string &r)
 {
 	str_ = "#";
 
@@ -89,7 +89,7 @@
 		else // otherwise it is a subfolder
 			path_.append(path);
 
-		pointer_ = json_pointer("");
+		pointer_ = local_json_pointer("");
 	}
 
 	if (pointer.size() > 0)
diff -Naur --ignore-trailing-space json_schema-1.0.0/src/json-validator.cpp json_schema-master/src/json-validator.cpp
--- json_schema-1.0.0/src/json-validator.cpp	2016-12-29 08:50:06.000000000 +0100
+++ json_schema-master/src/json-validator.cpp	2018-02-09 10:25:08.000000000 +0100
@@ -25,12 +25,21 @@
  */
 #include <json-schema.hpp>
 
-#include <regex>
 #include <set>
 
 using nlohmann::json;
 using nlohmann::json_uri;
 
+#ifdef JSON_SCHEMA_BOOST_REGEX
+ #include <boost/regex.hpp>
+ #define REGEX_NAMESPACE boost
+#elif defined(JSON_SCHEMA_NO_REGEX)
+ #define NO_STD_REGEX
+#else
+ #include <regex>
+ #define REGEX_NAMESPACE std
+#endif
+
 namespace
 {
 
@@ -38,20 +47,24 @@
 {
 	void resolve(json &schema, json_uri id)
 	{
+		// look for the id-field in this schema
 		auto fid = schema.find("id");
 
+		// found?
 		if (fid != schema.end() &&
 		    fid.value().type() == json::value_t::string)
-			id = id.derive(fid.value());
+			id = id.derive(fid.value()); // resolve to a full id with URL + path based on the parent
 
+		// already existing - error
 		if (schema_refs.find(id) != schema_refs.end())
 			throw std::invalid_argument("schema " + id.to_string() + " already present in local resolver");
 
-		// store a raw pointer to this (sub-)schema references by its absolute json_uri
-		// this (sub-)schema is part of a schema stored inside schema_store_
+		// store a raw pointer to this (sub-)schema referenced by its absolute json_uri
+		// this (sub-)schema is part of a schema stored inside schema_store_ so we can the a raw-pointer-ref
 		schema_refs[id] = &schema;
 
 		for (auto i = schema.begin(), end = schema.end(); i != end; ++i) {
+			// FIXME: this inhibits the user adding properties with the key "default"
 			if (i.key() == "default") /* default value can be objects, but are not schemas */
 				continue;
 
@@ -112,7 +125,7 @@
 					                       // of the same document, which has not been found
 					throw std::invalid_argument("sub-schema " + r.pointer().to_string() +
 					                            " in schema " + id.to_string() + " not found");
-				undefined_refs.insert(r);
+				undefined_refs.insert(r.url());
 			}
 		}
 	}
@@ -122,19 +135,20 @@
 {
 	const auto &type_it = schema.find("type");
 	if (type_it == schema.end())
-		/* TODO guess type for more safety,
-             * TODO use definitions
-			 * TODO valid by not being defined? FIXME not clear - there are
-             * schema-test case which are not specifying a type */
+		/* TODO something needs to be done here, I think */
 		return;
 
 	const auto &type_instance = type_it.value();
 
 	// any of the types in this array
 	if (type_instance.type() == json::value_t::array) {
-		if (std::find(type_instance.begin(),
-		              type_instance.end(),
-		              expected_type) != type_instance.end())
+		if ((std::find(type_instance.begin(),
+		               type_instance.end(),
+		               expected_type) != type_instance.end()) ||
+		    (expected_type == "integer" &&
+		     std::find(type_instance.begin(),
+		               type_instance.end(),
+		               "number") != type_instance.end()))
 			return;
 
 		std::ostringstream s;
@@ -146,11 +160,12 @@
 		    (type_instance == "number" && expected_type == "integer"))
 			return;
 
-		throw std::invalid_argument(type_instance.get<std::string>() + " is not a " + expected_type + " for " + name);
+		throw std::invalid_argument(name + " is " + expected_type +
+		                            ", but required type is " + type_instance.get<std::string>());
 	}
 }
 
-void validate_enum(json &instance, const json &schema, const std::string &name)
+void validate_enum(const json &instance, const json &schema, const std::string &name)
 {
 	const auto &enum_value = schema.find("enum");
 	if (enum_value == schema.end())
@@ -166,7 +181,7 @@
 	throw std::invalid_argument(s.str());
 }
 
-void validate_boolean(json & /*instance*/, const json &schema, const std::string &name)
+void validate_boolean(const json & /*instance*/, const json &schema, const std::string &name)
 {
 	validate_type(schema, "boolean", name);
 }
@@ -202,7 +217,7 @@
 	const auto &minimum = schema.find("minimum");
 	if (minimum != schema.end()) {
 		double mini = minimum.value();
-		auto ex = std::out_of_range(name + " exceeds minimum of " + std::to_string(mini));
+		auto ex = std::out_of_range(name + " is below the minimum of " + std::to_string(mini));
 		if (schema.find("exclusiveMinimum") != schema.end()) {
 			if (value <= mini)
 				throw ex;
@@ -213,25 +228,25 @@
 	}
 }
 
-void validate_integer(json &instance, const json &schema, const std::string &name)
+void validate_integer(const json &instance, const json &schema, const std::string &name)
 {
 	validate_type(schema, "integer", name);
 	validate_numeric(schema, name, instance.get<int>());
 }
 
-void validate_unsigned(json &instance, const json &schema, const std::string &name)
+void validate_unsigned(const json &instance, const json &schema, const std::string &name)
 {
 	validate_type(schema, "integer", name);
 	validate_numeric(schema, name, instance.get<unsigned>());
 }
 
-void validate_float(json &instance, const json &schema, const std::string &name)
+void validate_float(const json &instance, const json &schema, const std::string &name)
 {
 	validate_type(schema, "number", name);
 	validate_numeric(schema, name, instance.get<double>());
 }
 
-void validate_null(json & /*instance*/, const json &schema, const std::string &name)
+void validate_null(const json & /*instance*/, const json &schema, const std::string &name)
 {
 	validate_type(schema, "null", name);
 }
@@ -290,7 +305,7 @@
 		root_schema_ = schema;
 }
 
-void json_validator::validate(json &instance)
+void json_validator::validate(const json &instance)
 {
 	if (root_schema_ == nullptr)
 		throw std::invalid_argument("no root-schema has been inserted. Cannot validate an instance without it.");
@@ -303,7 +318,7 @@
 	insert_schema(schema, json_uri("#"));
 }
 
-void json_validator::validate(json &instance, const json &schema_, const std::string &name)
+void json_validator::validate(const json &instance, const json &schema_, const std::string &name)
 {
 	const json *schema = &schema_;
 
@@ -313,7 +328,7 @@
 		if (ref == schema->end())
 			break;
 
-		auto it = schema_refs_.find(ref.value());
+		auto it = schema_refs_.find(ref.value().get<std::string>());
 
 		if (it == schema_refs_.end())
 			throw std::invalid_argument("schema reference " + ref.value().get<std::string>() + " not found. Make sure all schemas have been inserted before validation.");
@@ -329,7 +344,7 @@
 		try {
 			validate(instance, attr.value(), name);
 			ok = false;
-		} catch (std::exception &e) {
+		} catch (std::exception &) {
 			ok = true;
 		}
 		if (!ok)
@@ -431,26 +446,26 @@
 	}
 }
 
-void json_validator::validate_array(json &instance, const json &schema, const std::string &name)
+void json_validator::validate_array(const json &instance, const json &schema, const std::string &name)
 {
 	validate_type(schema, "array", name);
 
 	// maxItems
 	const auto &maxItems = schema.find("maxItems");
 	if (maxItems != schema.end())
-		if (instance.size() > maxItems.value())
+		if (instance.size() > maxItems.value().get<size_t>())
 			throw std::out_of_range(name + " has too many items.");
 
 	// minItems
 	const auto &minItems = schema.find("minItems");
 	if (minItems != schema.end())
-		if (instance.size() < minItems.value())
-			throw std::out_of_range(name + " has too many items.");
+		if (instance.size() < minItems.value().get<size_t>())
+			throw std::out_of_range(name + " has too few items.");
 
 	// uniqueItems
 	const auto &uniqueItems = schema.find("uniqueItems");
 	if (uniqueItems != schema.end())
-		if (uniqueItems.value() == true) {
+		if (uniqueItems.value().get<bool>() == true) {
 			std::set<json> array_to_set;
 			for (auto v : instance) {
 				auto ret = array_to_set.insert(v);
@@ -491,7 +506,7 @@
 					break;
 
 				case json::value_t::boolean:
-					if (additionalItems == false)
+					if (additionalItems.get<bool>() == false)
 						throw std::out_of_range("additional values in array are not allowed for " + sub_name);
 					else
 						validation_done = true;
@@ -518,7 +533,7 @@
 	}
 }
 
-void json_validator::validate_object(json &instance, const json &schema, const std::string &name)
+void json_validator::validate_object(const json &instance, const json &schema, const std::string &name)
 {
 	validate_type(schema, "object", name);
 
@@ -547,13 +562,13 @@
 	// maxProperties
 	const auto &maxProperties = schema.find("maxProperties");
 	if (maxProperties != schema.end())
-		if (instance.size() > maxProperties.value())
+		if (instance.size() > maxProperties.value().get<size_t>())
 			throw std::out_of_range(name + " has too many properties.");
 
 	// minProperties
 	const auto &minProperties = schema.find("minProperties");
 	if (minProperties != schema.end())
-		if (instance.size() < minProperties.value())
+		if (instance.size() < minProperties.value().get<size_t>())
 			throw std::out_of_range(name + " has too few properties.");
 
 	// additionalProperties
@@ -566,7 +581,7 @@
 	const auto &additionalPropertiesVal = schema.find("additionalProperties");
 	if (additionalPropertiesVal != schema.end()) {
 		if (additionalPropertiesVal.value().type() == json::value_t::boolean)
-			additionalProperties = additionalPropertiesVal.value() == true ? True : False;
+			additionalProperties = additionalPropertiesVal.value().get<bool>() == true ? True : False;
 		else
 			additionalProperties = Object;
 	}
@@ -591,13 +606,20 @@
 
 		for (auto pp = patternProperties.begin();
 		     pp != patternProperties.end(); ++pp) {
-			std::regex re(pp.key(), std::regex::ECMAScript);
+#ifndef NO_STD_REGEX
+			REGEX_NAMESPACE::regex re(pp.key(), REGEX_NAMESPACE::regex::ECMAScript);
 
-			if (std::regex_search(child.key(), re)) {
+			if (REGEX_NAMESPACE::regex_search(child.key(), re)) {
 				validate(child.value(), pp.value(), child_name);
 				property_or_patternProperties_has_validated = true;
 			}
+#else
+			// accept everything in case of a patternProperty
+			property_or_patternProperties_has_validated = true;
+			break;
+#endif
 		}
+
 		if (property_or_patternProperties_has_validated)
 			continue;
 
@@ -661,20 +683,20 @@
 static std::size_t utf8_length(const std::string &s)
 {
 	size_t len = 0;
-	for (const unsigned char &c: s)
+	for (const unsigned char &c : s)
 		if ((c & 0xc0) != 0x80)
 			len++;
 	return len;
 }
 
-void json_validator::validate_string(json &instance, const json &schema, const std::string &name)
+void json_validator::validate_string(const json &instance, const json &schema, const std::string &name)
 {
 	validate_type(schema, "string", name);
 
 	// minLength
 	auto attr = schema.find("minLength");
 	if (attr != schema.end())
-		if (utf8_length( instance ) < attr.value()) {
+		if (utf8_length(instance) < attr.value().get<size_t>()) {
 			std::ostringstream s;
 			s << "'" << name << "' of value '" << instance << "' is too short as per minLength ("
 			  << attr.value() << ")";
@@ -684,20 +706,22 @@
 	// maxLength
 	attr = schema.find("maxLength");
 	if (attr != schema.end())
-		if (utf8_length(instance) > attr.value()) {
+		if (utf8_length(instance) > attr.value().get<size_t>()) {
 			std::ostringstream s;
 			s << "'" << name << "' of value '" << instance << "' is too long as per maxLength ("
 			  << attr.value() << ")";
 			throw std::out_of_range(s.str());
 		}
 
+#ifndef NO_STD_REGEX
 	// pattern
 	attr = schema.find("pattern");
 	if (attr != schema.end()) {
-		std::regex re(attr.value().get<std::string>(), std::regex::ECMAScript);
-		if (!std::regex_search(instance.get<std::string>(), re))
+		REGEX_NAMESPACE::regex re(attr.value().get<std::string>(), REGEX_NAMESPACE::regex::ECMAScript);
+		if (!REGEX_NAMESPACE::regex_search(instance.get<std::string>(), re))
 			throw std::invalid_argument(instance.get<std::string>() + " does not match regex pattern: " + attr.value().get<std::string>() + " for " + name);
 	}
+#endif
 
 	// format
 	attr = schema.find("format");
